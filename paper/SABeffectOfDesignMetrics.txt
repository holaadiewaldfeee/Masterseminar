effect of design metrics
- The goal of this work is to empirically explore the relationship between object-oriented design metrics and fault proneness of object-oriented system classes.
- development of metrics for measuring the properties of
software such as coupling, cohesion or inheritance that can be used in early quality assessments.
- java api 136 classes, 26 design metrics
- results: many metrics are based on comparable ideas and provide redundant information
- results: It is shown that by using a subset of metrics in the prediction models can be built to identify the faulty classes
(- result: The proposed model predicts faulty classes with more than 80% accuracy.)
- STUDY: The metrics of coupling, cohesion, inheritance and size are the independent variables used in
this study. 
- STUDY is divided in the following parts: 
1) whether all these metrics are independent or are capturing same underlying property of the object being measured ( ob all diese Metriken unabh√§ngig sind oder dieselbe zugrundeliegende Eigenschaft des zu messenden Objekts erfassen.)
2) Univariate logistic regression analysis is carried out to test the hypothesis that size, coupling and inheritance increase fault proneness of a class whereas cohesion increase decrease fault proneness of a class and find individual impact of metrics on fault proneness. (Es wird eine univariate logistische Regressionsanalyse durchgef√ºhrt, um die Hypothese zu testen, dass Gr√∂√üe, Kopplung und Vererbung die Fehleranf√§lligkeit einer Klasse erh√∂hen, w√§hrend eine Zunahme der Koh√§sion die Fehleranf√§lligkeit einer Klasse verringert und individuelle Auswirkungen von Metriken auf die Fehleranf√§lligkeit finden.)
3) Finally a model using multivariate logistic regression analysis for predicting fault proneness of classes is given to predict which classes of a java application released in future will be faulty. (Modell vorgestellt, das eine multivariate logistische Regressionsanalyse zur Vorhersage der Fehleranf√§lligkeit von Klassen verwendet, um vorherzusagen, welche Klassen einer in Zukunft ver√∂ffentlichten Java-Anwendung fehlerhaft sein werden.)
- results: number of OO metrics is large but the number of dimensions actually found is much low. (Die Ergebnisse zeigen, dass zwar die Zahl der OO-Metriken gro√ü ist, die Zahl der tats√§chlich gefundenen Dimensionen jedoch sehr gering ist.)
- results: Further it was observed that import coupling (that count the number of other classes called by a class) metrics are strongly associated with fault proneness and predict faulty classes with high accuracy.(Weiterhin wurde beobachtet, dass Importkopplungs-Metriken (die die Anzahl der anderen von einer Klasse aufgerufenen Klassen z√§hlen) stark mit der Fehleranf√§lligkeit assoziiert sind und fehlerhafte Klassen mit hoher Genauigkeit vorhersagen.)
- results: Based on these results, it is reasonable to claim that such a model could help for planning and executing testing by focusing resources on fault prone parts of the design and code. (Auf der Grundlage dieser Ergebnisse ist es vern√ºnftig zu behaupten, dass ein solches Modell bei der Planung und Durchf√ºhrung von Tests helfen k√∂nnte, indem es die Ressourcen auf fehleranf√§llige Teile des Entwurfs und des Codes konzentriert.)
- RESULTS: studie nur von studenten, und kleine projekte, In dieser Studie wird die Schwere der Fehler nicht ber√ºcksichtigt. Es kann eine Reihe von Fehlern geben, die das System in verschiedenen Zust√§nden verlassen k√∂nnen, z.B. kann ein Ausfall, der durch einen Fehler verursacht wird, zu einem Systemabsturz oder zur Unf√§higkeit f√ºhren, eine Datei zu √∂ffnen. Der erstgenannte Fehler ist schwerwiegender als der letztgenannte, so dass die Fehlerarten nicht die gleichen sind.
- viele der vorgeschlagenen Metriken auf vergleichbaren Ideen basieren und daher etwas redundante Informationen liefer
üòÅÔ∏è- The results of univariate LR analysis show that most of the import coupling and cohesion metrics are found related to fault proneness.
- On the other hand inheritance metrics were not found related to fault proneness.

- These metrics provide ways
to evaluate the quality of software and their use in earlier phases of software development can help organizations in assessing large software development quickly, at a low cost (Diese Metriken bieten M√∂glichkeiten
die Qualit√§t von Software zu bewerten und ihre Verwendung in fr√ºheren Phasen der Software-Entwicklung kann Organisationen dabei helfen, gro√üe Software-Entwicklungen schnell und kosteng√ºnstig zu bewerten)
